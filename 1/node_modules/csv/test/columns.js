// Generated by CoffeeScript 1.4.0

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
*/


(function() {
  var csv, fs, should;

  require('coffee-script');

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov/csv') : require('../src/csv');

  describe('columns', function() {
    describe('in read option', function() {
      it('Test columns in true', function(next) {
        return csv().from.path("" + __dirname + "/columns/in_true.in", {
          columns: true
        }).to.path("" + __dirname + "/columns/in_true.tmp").transform(function(record, index) {
          record.should.be.a('object');
          record.should.not.be.an["instanceof"](Array);
          if (index === 0) {
            record.FIELD_1.should.eql('20322051544');
          } else if (index === 1) {
            record.FIELD_4.should.eql('DEF');
          }
          return record;
        }).on('close', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/in_true.out");
          result = fs.readFileSync("" + __dirname + "/columns/in_true.tmp");
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/in_true.tmp");
          return next();
        });
      });
      it('Test columns in named', function(next) {
        return csv().from.path("" + __dirname + "/columns/in_named.in", {
          columns: ["FIELD_1", "FIELD_2", "FIELD_3", "FIELD_4", "FIELD_5", "FIELD_6"]
        }).to.path("" + __dirname + "/columns/in_named.tmp").transform(function(record, index) {
          record.should.be.a('object');
          record.should.not.be.an["instanceof"](Array);
          if (index === 0) {
            record.FIELD_1.should.eql('20322051544');
          } else if (index === 1) {
            record.FIELD_4.should.eql('DEF');
          }
          return record;
        }).on('record', function(record, index) {
          record.should.be.a('object');
          return record.should.not.be.an["instanceof"](Array);
        }).on('close', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/in_named.out");
          result = fs.readFileSync("" + __dirname + "/columns/in_named.tmp");
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/in_named.tmp");
          return next();
        });
      });
      return it('should map the column property name to display name', function(next) {
        var data, transformCount;
        transformCount = 0;
        data = [
          {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from(data, {
          columns: {
            field1: 'column1',
            field3: 'column3'
          }
        }).transform(function(record, index) {
          transformCount++;
          record.should.eql({
            field1: data[index].field1,
            field3: data[index].field3
          });
          return record;
        }).to(function(data) {
          data.should.eql('column1,column3\nval11,val13\nval21,val23');
          transformCount.should.eql(2);
          return next();
        }, {
          header: true
        });
      });
    });
    describe('in write option', function() {
      it('should be the same length', function(next) {
        return csv().from.path("" + __dirname + "/columns/out_no_transform.in").to.path("" + __dirname + "/columns/out_no_transform.tmp", {
          columns: ["FIELD_1", "FIELD_2"]
        }).on('record', function(record, index) {
          return record.should.be.an["instanceof"](Array);
        }).on('close', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/out_no_transform.out");
          result = fs.readFileSync("" + __dirname + "/columns/out_no_transform.tmp");
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/out_no_transform.tmp");
          return next();
        });
      });
      it('should filter from a transformed object', function(next) {
        return csv().from.path("" + __dirname + "/columns/out_named.in").to.path("" + __dirname + "/columns/out_named.tmp", {
          columns: ["FIELD_1", "FIELD_2"]
        }).transform(function(record, index) {
          record.should.be.an["instanceof"](Array);
          return {
            FIELD_2: record[3],
            zombie: record[1],
            FIELD_1: record[4]
          };
        }).on('record', function(record, index) {
          record.should.be.a('object');
          return record.should.not.be.an["instanceof"](Array);
        }).on('close', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/out_named.out");
          result = fs.readFileSync("" + __dirname + "/columns/out_named.tmp");
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/out_named.tmp");
          return next();
        });
      });
      it('should emit new columns in output', function(next) {
        return csv().from.path("" + __dirname + "/columns/out_new.in", {
          columns: true
        }).to.path("" + __dirname + "/columns/out_new.tmp", {
          newColumns: true,
          header: true
        }).transform(function(record) {
          record.should.be.an.a('object');
          record.FIELD_7 = 'new_field';
          return record;
        }).on('close', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/out_new.out");
          result = fs.readFileSync("" + __dirname + "/columns/out_new.tmp");
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/out_new.tmp");
          return next();
        });
      });
      return it('should map the column property name to display name', function(next) {
        var data, transformCount;
        transformCount = 0;
        data = [
          {
            field1: 'val11',
            field2: 'val12',
            field3: 'val13'
          }, {
            field1: 'val21',
            field2: 'val22',
            field3: 'val23'
          }
        ];
        return csv().from(data).transform(function(record, index) {
          transformCount++;
          record.should.eql(data[index]);
          return record;
        }).to(function(data) {
          data.should.eql('column1,column3\nval11,val13\nval21,val23');
          transformCount.should.eql(2);
          return next();
        }, {
          header: true,
          columns: {
            field1: 'column1',
            field3: 'column3'
          }
        });
      });
    });
    return describe('with both options', function() {
      it('should accept from columns as true ans to columns as array', function(next) {
        var data;
        data = 'field1,field2,field3\nval1,val2,val3';
        return csv().from(data, {
          columns: true
        }).to(function(data) {
          data.should.eql('val1,val3');
          return next();
        }, {
          columns: ['field1', 'field3']
        });
      });
      it('should accept from columns as true ans to columns as object with header', function(next) {
        var data;
        data = 'field1,field2,field3\nval1,val2,val3';
        return csv().from(data, {
          columns: true
        }).to(function(data) {
          data.should.eql('column1,column3\nval1,val3');
          return next();
        }, {
          columns: {
            field1: 'column1',
            field3: 'column3'
          },
          header: true
        });
      });
      return it('should reorder if from and to columns are arrays', function(next) {
        return csv().from('val1,val2,val3', {
          columns: ['a', 'b', 'c']
        }).to(function(data) {
          data.should.eql('val3,val2,val1');
          return next();
        }, {
          columns: ['c', 'b', 'a']
        });
      });
    });
  });

}).call(this);
