// Generated by CoffeeScript 1.4.0

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
*/


(function() {
  var csv, fs, should;

  require('coffee-script');

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov/csv') : require('../src/csv');

  describe('write', function() {
    it('Test write array', function(next) {
      var count, i, test, _i;
      count = 0;
      test = csv().to.path("" + __dirname + "/write/write_array.tmp").on('record', function(record, index) {
        record.should.be.an["instanceof"](Array);
        count.should.eql(index);
        return count++;
      }).on('close', function() {
        var expect, result;
        count.should.eql(1000);
        expect = fs.readFileSync("" + __dirname + "/write/write.out");
        result = fs.readFileSync("" + __dirname + "/write/write_array.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/write/write_array.tmp", next);
      });
      for (i = _i = 0; _i < 1000; i = ++_i) {
        test.write(["Test " + i, i, '"']);
      }
      return test.end();
    });
    it('Test write object with column options', function(next) {
      var count, i, test, _i;
      count = 0;
      test = csv().to.path("" + __dirname + "/write/write_object.tmp", {
        columns: ['name', 'value', 'escape']
      }).on('record', function(record, index) {
        record.should.be.a('object');
        record.should.not.be.an["instanceof"](Array);
        count.should.eql(index);
        return count++;
      }).on('close', function() {
        var expect, result;
        count.should.eql(1000);
        expect = fs.readFileSync("" + __dirname + "/write/write.out");
        result = fs.readFileSync("" + __dirname + "/write/write_object.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/write/write_object.tmp", next);
      });
      for (i = _i = 0; _i < 1000; i = ++_i) {
        test.write({
          name: "Test " + i,
          value: i,
          escape: '"',
          ovni: "ET " + i
        });
      }
      return test.end();
    });
    it('Test write string', function(next) {
      var buffer, count, i, test, _i;
      count = 0;
      test = csv().to.path("" + __dirname + "/write/write_string.tmp").on('record', function(record, index) {
        record.should.be.an["instanceof"](Array);
        count.should.eql(index);
        return count++;
      }).on('close', function() {
        var expect, result;
        count.should.eql(1000);
        expect = fs.readFileSync("" + __dirname + "/write/write.out");
        result = fs.readFileSync("" + __dirname + "/write/write_string.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/write/write_string.tmp", next);
      });
      buffer = '';
      for (i = _i = 0; _i < 1000; i = ++_i) {
        buffer += ''.concat("Test " + i, ',', i, ',', '""""', "\n");
        if (buffer.length > 250) {
          test.write(buffer.substr(0, 250));
          buffer = buffer.substr(250);
        }
      }
      test.write(buffer);
      return test.end();
    });
    it('Test write string with preserve', function(next) {
      var buffer, count, i, test, _i;
      count = 0;
      test = csv().to.path("" + __dirname + "/write/string_preserve.tmp").transform(function(record, index) {
        if (index === 0) {
          test.write('--------------------\n', true);
        }
        test.write(record);
        test.write('\n--------------------', true);
        record.should.be.an["instanceof"](Array);
        count.should.eql(index);
        count++;
        return null;
      }).on('close', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/write/string_preserve.out");
        result = fs.readFileSync("" + __dirname + "/write/string_preserve.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/write/string_preserve.tmp", next);
      });
      test.write('# This line should not be parsed', true);
      test.write('\n', true);
      buffer = '';
      for (i = _i = 0; _i < 2; i = ++_i) {
        buffer += ''.concat("Test " + i, ',', i, ',', '""""', "\n");
        if (buffer.length > 250) {
          test.write(buffer.substr(0, 250));
          buffer = buffer.substr(250);
        }
      }
      test.write(buffer);
      test.write('\n', true);
      test.write('# This one as well', true);
      return test.end();
    });
    it('should transform record provided by write as an array', function(next) {
      var count, i, test, _i;
      count = 0;
      test = csv().to.path("" + __dirname + "/write/write_array.tmp").transform(function(record, index) {
        return count++;
      }).on('close', function() {
        count.should.eql(1000);
        return fs.unlink("" + __dirname + "/write/write_array.tmp", next);
      });
      for (i = _i = 0; _i < 1000; i = ++_i) {
        test.write(['Test ' + i, i, '"']);
      }
      return test.end();
    });
    return it('should emit header even without a source', function(next) {
      var test;
      test = csv().to.path("" + __dirname + "/write/write_sourceless.tmp", {
        columns: ['col1', 'col2'],
        header: true,
        lineBreaks: 'unix'
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/write/write_sourceless.out");
        result = fs.readFileSync("" + __dirname + "/write/write_sourceless.tmp");
        result.toString().should.eql(expect.toString());
        return fs.unlink("" + __dirname + "/write/write_sourceless.tmp", next);
      });
      test.write({
        col1: 'foo1',
        col2: 'goo1'
      });
      test.write({
        col1: 'foo2',
        col2: 'goo2'
      });
      return test.end();
    });
  });

}).call(this);
