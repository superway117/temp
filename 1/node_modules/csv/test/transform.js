// Generated by CoffeeScript 1.4.0

/*
Test CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
*/


(function() {
  var csv, fs, should;

  require('coffee-script');

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov/csv') : require('../src/csv');

  describe('transform', function() {
    it('should be able to reorder fields', function(next) {
      var count;
      count = 0;
      return csv().from.path("" + __dirname + "/transform/reorder.in").to.path("" + __dirname + "/transform/reorder.tmp").transform(function(record, index) {
        count.should.eql(index);
        count++;
        record.unshift(record.pop());
        return record;
      }).on('close', function() {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/reorder.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/reorder.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/reorder.tmp", next);
      });
    });
    it('should skip all lines where transform return undefined', function(next) {
      var count;
      count = 0;
      return csv().from.path("" + __dirname + "/transform/undefined.in").to.path("" + __dirname + "/transform/undefined.tmp").transform(function(record, index) {
        count.should.eql(index);
        count++;
        return null;
      }).on('close', function() {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/undefined.out");
        result = fs.readFileSync("" + __dirname + "/transform/undefined.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/undefined.tmp", next);
      });
    });
    it('should skip all lines where transform return null', function(next) {
      var count;
      count = 0;
      return csv().from.path("" + __dirname + "/transform/null.in").to.path("" + __dirname + "/transform/null.tmp").transform(function(record, index) {
        count.should.eql(index);
        count++;
        if (index % 2) {
          return record;
        } else {
          return null;
        }
      }).on('close', function() {
        var expect, result;
        count.should.eql(6);
        expect = fs.readFileSync("" + __dirname + "/transform/null.out");
        result = fs.readFileSync("" + __dirname + "/transform/null.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/null.tmp", next);
      });
    });
    it('should recieve an array and return an object', function(next) {
      return csv().from.path("" + __dirname + "/transform/object.in").to.path("" + __dirname + "/transform/object.tmp").transform(function(record, index) {
        return {
          field_1: record[4],
          field_2: record[3]
        };
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/object.out");
        result = fs.readFileSync("" + __dirname + "/transform/object.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/object.tmp", next);
      }).on('error', function(e) {
        return should.be.ok(false);
      });
    });
    it('should accept a returned string', function(next) {
      return csv().from.path("" + __dirname + "/transform/string.in").to.path("" + __dirname + "/transform/string.tmp").transform(function(record, index) {
        return (index > 0 ? ',' : '') + record[4] + ":" + record[3];
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/string.out");
        result = fs.readFileSync("" + __dirname + "/transform/string.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/string.tmp", next);
      });
    });
    it('should accept a returned integer', function(next) {
      var i, result, test, _i;
      result = '';
      test = csv().transform(function(record, index) {
        return record[1];
      }).on('record', function(record) {
        return result += record;
      }).on('end', function() {
        result.should.eql('210');
        return next();
      });
      for (i = _i = 2; _i >= 0; i = --_i) {
        test.write(['Test ' + i, i, '"']);
      }
      return test.end();
    });
    it('should accept a returned array with different types', function(next) {
      return csv().from.path("" + __dirname + "/transform/types.in").to.path("" + __dirname + "/transform/types.tmp").transform(function(record, index) {
        record[3] = record[3].split('-');
        return [parseInt(record[0]), parseFloat(record[1]), parseFloat(record[2]), Date.UTC(record[3][0], record[3][1], record[3][2]), !!record[4], !!record[5]];
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/types.out");
        result = fs.readFileSync("" + __dirname + "/transform/types.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/types.tmp", next);
      });
    });
    it('should catch error thrown in transform callback', function(next) {
      var count, error, i, test, _i, _results;
      count = 0;
      error = false;
      test = csv().to.path("" + __dirname + "/write/write_array.tmp").transform(function(record, index) {
        if (index % 10 === 9) {
          throw new Error("Error at index " + index);
        }
        return record;
      }).on('error', function(e) {
        error = true;
        e.message.should.equal('Error at index 9');
        return setTimeout(next, 100);
      }).on('record', function(record) {
        return record[1].should.be.below(9);
      }).on('close', function() {
        false.should.be.ok;
        return next();
      });
      _results = [];
      for (i = _i = 0; _i < 1000; i = ++_i) {
        if (!error) {
          _results.push(test.write(['Test ' + i, i, '"']));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    return describe('async', function() {
      it('should output the record if passed in the callback as an arraw', function(next) {
        return csv().from('a1,b1\na2,b2').to(function(data) {
          data.should.eql('b1,a1\nb2,a2');
          return next();
        }).transform(function(record, index, callback) {
          return process.nextTick(function() {
            return callback(null, record.reverse());
          });
        });
      });
      it('should output the record if passed in the callback as an object', function(next) {
        return csv().from('a1,b1\na2,b2').to(function(data) {
          data.should.eql('b1,a1\nb2,a2');
          return next();
        }).transform(function(record, index, callback) {
          return process.nextTick(function() {
            return callback(null, {
              a: record[1],
              b: record[0]
            });
          });
        });
      });
      return it('should skip the record if callback called without a record', function(next) {
        return csv().from('a1,b1\na2,b2\na3,b3\na4,b4').to(function(data) {
          data.should.eql('a1,b1\na3,b3');
          return next();
        }).transform(function(record, index, callback) {
          return process.nextTick(function() {
            return callback(null, index % 2 === 0 ? record : null);
          });
        });
      });
    });
  });

}).call(this);
