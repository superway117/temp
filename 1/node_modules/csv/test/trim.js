// Generated by CoffeeScript 1.4.0

/*
Node CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)
Testing the read options `trim`, `ltrim` and `rtrim`.
*/


(function() {
  var csv, fs, should;

  require('coffee-script');

  fs = require('fs');

  should = require('should');

  csv = process.env.CSV_COV ? require('../lib-cov/csv') : require('../src/csv');

  describe('trim', function() {
    it('should ignore the whitespaces immediately following the delimiter', function(next) {
      return csv().from.path("" + __dirname + "/trim/ltrim.in", {
        ltrim: true
      }).to.path("" + __dirname + "/trim/ltrim.tmp").transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(3);
        expect = fs.readFileSync("" + __dirname + "/trim/ltrim.out");
        result = fs.readFileSync("" + __dirname + "/trim/ltrim.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/trim/ltrim.tmp", next);
      });
    });
    it('should ignore the whitespaces immediately preceding the delimiter', function(next) {
      return csv().from.path("" + __dirname + "/trim/rtrim.in", {
        rtrim: true
      }).to.path("" + __dirname + "/trim/rtrim.tmp").transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(3);
        expect = fs.readFileSync("" + __dirname + "/trim/rtrim.out");
        result = fs.readFileSync("" + __dirname + "/trim/rtrim.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/trim/rtrim.tmp", next);
      });
    });
    it('should ignore the whitespaces immediately preceding and following the delimiter', function(next) {
      return csv().from.path("" + __dirname + "/trim/trim.in", {
        trim: true
      }).to.path("" + __dirname + "/trim/trim.tmp").transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(3);
        expect = fs.readFileSync("" + __dirname + "/trim/trim.out");
        result = fs.readFileSync("" + __dirname + "/trim/trim.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/trim/trim.tmp", next);
      });
    });
    return it('should preserve surrounding whitespaces', function(next) {
      return csv().from.path("" + __dirname + "/trim/notrim.in").to.path("" + __dirname + "/trim/notrim.tmp").transform(function(record, index) {
        return record;
      }).on('close', function(count) {
        var expect, result;
        count.should.eql(3);
        expect = fs.readFileSync("" + __dirname + "/trim/notrim.out");
        result = fs.readFileSync("" + __dirname + "/trim/notrim.tmp");
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/trim/notrim.tmp", next);
      });
    });
  });

}).call(this);
